import os
import asyncio
import logging
import sys
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardRemove
)
from aiogram.filters import Command
import psycopg2
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è Windows
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
def get_db_connection():
    db_url = os.getenv('DATABASE_URL')
    if db_url:
        result = urlparse(db_url)
        return psycopg2.connect(
            dbname=result.path[1:],
            user=result.username,
            password=result.password,
            host=result.hostname,
            port=result.port
        )
    else:
        return psycopg2.connect(
            dbname=os.getenv('DB_NAME', 'railway'),
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD', ''),
            host=os.getenv('DB_HOST', 'localhost'),
            port=os.getenv('DB_PORT', '5432')
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async def check_db_connection():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        conn.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_keyboard(items, row_width=2):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=item) for item in items[i:i+row_width]] 
                 for i in range(0, len(items), row_width)],
        resize_keyboard=True,
        one_time_keyboard=True
    )

GENDER_KEYBOARD = make_keyboard(["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
AGE_KEYBOARD = make_keyboard(["–î–æ 22", "22-30", "–ë–æ–ª–µ–µ 30"])
VISIT_KEYBOARD = make_keyboard(["–î–æ 3 —Ä–∞–∑", "3-8 —Ä–∞–∑", "–ë–æ–ª–µ–µ 8 —Ä–∞–∑"])
YES_NO_KEYBOARD = make_keyboard(["–î–∞", "–ù–µ—Ç"])
ADMIN_KEYBOARD = make_keyboard([
    "üìä –û—Ç—á—ë—Ç –ø–æ –±–∞–∑–µ", 
    "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", 
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
    "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤",
    "üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É",
    "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
    "üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
    "üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç",
    "üîô –ù–∞–∑–∞–¥"
])
CANCEL_KEYBOARD = make_keyboard(["‚ùå –û—Ç–º–µ–Ω–∞"])

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Questionnaire(StatesGroup):
    WANT_HELP = State()
    CONFIRM_HELP = State()
    APPRECIATE = State()
    DISLIKE = State()
    IMPROVE = State()
    GENDER = State()
    AGE = State()
    VISIT_FREQ = State()

class AdminStates(StatesGroup):
    ADD_ADMIN = State()
    CHAT_WITH_CLIENT = State()
    CONFIRM_CLEAR = State()
    CONFIRM_CLEAR_ADMINS = State()
    ADMIN_CHATTING = State()
    SEND_BROADCAST = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            added_by BIGINT,
            added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            appreciate TEXT,
            dislike TEXT,
            improve TEXT,
            gender TEXT,
            age_group TEXT,
            visit_freq TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        cursor.execute('''
        INSERT INTO admins (user_id, username, added_by) 
        VALUES (%s, %s, %s)
        ON CONFLICT (user_id) DO NOTHING
        ''', (641521378, "sarkis_20032", 641521378))
        
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    conn = None
    try:
        if user_id == 641521378:  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            return True
            
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM admins WHERE user_id = %s', (user_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return False
    finally:
        if conn:
            conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_super_admin(user_id: int) -> bool:
    return user_id == 641521378

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
async def notify_admins(text: str, exclude_id=None):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM admins')
        admins = cursor.fetchall()
        
        for admin in admins:
            admin_id = admin[0]
            if exclude_id and admin_id == exclude_id:
                continue
            try:
                await bot.send_message(admin_id, text)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
    finally:
        if conn:
            conn.close()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    conn = None
    try:
        await state.clear()
        user_id = message.from_user.id
        admin_status = is_admin(user_id)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM clients WHERE user_id = %s', (user_id,))
        
        if cursor.fetchone():
            if not admin_status:
                await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –µ—â—ë —Ä–∞–∑?", 
                                  reply_markup=YES_NO_KEYBOARD)
            else:
                await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –µ—â—ë —Ä–∞–∑?\n"
                                  "–ò–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin", 
                                  reply_markup=YES_NO_KEYBOARD)
            await state.set_state(Questionnaire.WANT_HELP)
            await state.update_data(is_admin=admin_status)
        else:
            await state.update_data(
                username=message.from_user.username,
                full_name=message.from_user.full_name,
                is_admin=admin_status
            )
            await message.answer(
                "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –º–µ–Ω—è –∑–æ–≤—É—Ç –î–∞–≤–∏–¥üëã —è –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ \"–î—ã–º\"üí®\n"
                "–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—Éüòä\n\n"
                "–Ø —Å–æ–∑–¥–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–≤–æ–∏–º –≥–æ—Å—Ç—è–º —Å–∞–º—ã–π –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µüòç\n\n"
                "–í—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ –¥–ª—è –≤–∞—Å?",
                reply_markup=YES_NO_KEYBOARD
            )
            await state.set_state(Questionnaire.WANT_HELP)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        if conn:
            conn.close()

@dp.message(Command('admin'))
async def admin_panel(message: types.Message):
    try:
        user_id = message.from_user.id
        
        if not is_admin(user_id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if message.chat.type != 'private':
            await message.answer("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            return
            
        await message.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=ADMIN_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–ù–ö–ï–¢–´ ==========

@dp.message(Questionnaire.WANT_HELP)
async def process_want_help(message: types.Message, state: FSMContext):
    try:
        if message.text.lower() == '–Ω–µ—Ç':
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ‚ú®\n–¢—É—Ç —è –±—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –ø–æ–¥–∞—Ä–∫–∏ üéÅ\n\n"
            "–ù–æ —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ, –º—ã —Ö–æ—Ç–∏–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã\n\n"
            "–°–º–æ–∂–µ—Ç–µ –Ω–∞–º –ø–æ–º–æ—á—å, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞?",
            reply_markup=YES_NO_KEYBOARD
        )
        await state.set_state(Questionnaire.CONFIRM_HELP)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ WANT_HELP: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.CONFIRM_HELP)
async def process_confirm_help(message: types.Message, state: FSMContext):
    try:
        if message.text.lower() == '–Ω–µ—Ç':
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return
        
        await message.answer(
            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–º–æ—â—åü§ù\n"
            "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ 2 –≤–µ—â–∏ –≤ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –≤—ã —Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?üòç",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Questionnaire.APPRECIATE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ CONFIRM_HELP: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.APPRECIATE)
async def process_appreciate(message: types.Message, state: FSMContext):
    try:
        await state.update_data(appreciate=message.text)
        await message.answer("–•–æ—Ä–æ—à–æüòä\n–ò –µ—â–µ –ø–∞—Ä—É –≤–µ—â–µ–π –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ù–ï –Ω—Ä–∞–≤—è—Ç—Å—è?üëø")
        await state.set_state(Questionnaire.DISLIKE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ APPRECIATE: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.DISLIKE)
async def process_dislike(message: types.Message, state: FSMContext):
    try:
        await state.update_data(dislike=message.text)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å)\n–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –±—É–¥—É—á–∏ –Ω–∞ –º–æ–µ–º –º–µ—Å—Ç–µ —á—Ç–æ –±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ?")
        await state.set_state(Questionnaire.IMPROVE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ DISLIKE: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.IMPROVE)
async def process_improve(message: types.Message, state: FSMContext):
    try:
        await state.update_data(improve=message.text)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ –ø–æ–º–æ—â—åüòä\n"
            "–Ø —É—á—Ç—É –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–∏–ª–æ–∂–∏—Ç—å —É—Å–∏–ª–∏—è —á—Ç–æ –±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\n\n"
            "–ï—Å–ª–∏ –Ω–µ —Å–ª–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=GENDER_KEYBOARD
        )
        await state.set_state(Questionnaire.GENDER)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ IMPROVE: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.GENDER)
async def process_gender(message: types.Message, state: FSMContext):
    try:
        if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        
        await state.update_data(gender=message.text)
        await message.answer("–í–∞—à–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:", reply_markup=AGE_KEYBOARD)
        await state.set_state(Questionnaire.AGE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ GENDER: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.AGE)
async def process_age(message: types.Message, state: FSMContext):
    try:
        if message.text not in ["–î–æ 22", "22-30", "–ë–æ–ª–µ–µ 30"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        
        await state.update_data(age_group=message.text)
        await message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –Ω–∞—Å –ø–æ—Å–µ—â–∞–µ—Ç–µ?", reply_markup=VISIT_KEYBOARD)
        await state.set_state(Questionnaire.VISIT_FREQ)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ AGE: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Questionnaire.VISIT_FREQ)
async def process_visit_freq(message: types.Message, state: FSMContext):
    conn = None
    try:
        if message.text not in ["–î–æ 3 —Ä–∞–∑", "3-8 —Ä–∞–∑", "–ë–æ–ª–µ–µ 8 —Ä–∞–∑"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return
        
        user_data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
        INSERT INTO clients (
            user_id, username, full_name, appreciate, dislike, 
            improve, gender, age_group, visit_freq, is_admin
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (user_id) DO UPDATE SET
            username = EXCLUDED.username,
            full_name = EXCLUDED.full_name,
            appreciate = EXCLUDED.appreciate,
            dislike = EXCLUDED.dislike,
            improve = EXCLUDED.improve,
            gender = EXCLUDED.gender,
            age_group = EXCLUDED.age_group,
            visit_freq = EXCLUDED.visit_freq,
            is_admin = EXCLUDED.is_admin,
            timestamp = CURRENT_TIMESTAMP
        ''', (
            message.from_user.id,
            user_data.get('username'),
            user_data.get('full_name'),
            user_data.get('appreciate'),
            user_data.get('dislike'),
            user_data.get('improve'),
            user_data.get('gender'),
            user_data.get('age_group'),
            message.text,
            user_data.get('is_admin', False)
        ))
        conn.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω)
        if not user_data.get('is_admin', False):
            admin_message = (
                "üìù –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username', '–±–µ–∑ username')} ({user_data.get('full_name', '–±–µ–∑ –∏–º–µ–Ω–∏')})\n"
                f"üÜî ID: {message.from_user.id}\n"
                f"üëç –ß—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è: {user_data.get('appreciate', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üëé –ß—Ç–æ –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è: {user_data.get('dislike', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {user_data.get('improve', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üßë‚Äçü§ù‚Äçüßë –ü–æ–ª: {user_data.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üìä –í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age_group', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üõí –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π: {message.text}"
            )
            await notify_admins(admin_message)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! üôè\n\n"
            "üìû –ú–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 8-918-5567-53-33\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é\n"
            "2. –ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp –∏–ª–∏ Telegram\n"
            "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ —á–∞—Ç–µ - —è –æ—Ç–≤–µ—á—É –ª–∏—á–Ω–æ\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞, —Ü–µ–Ω –∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n"
            "üëâ https://t.me/+BR14rdoGA91mZjdi"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if user_data.get('is_admin', False):
            response += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin"
        
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
            
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ VISIT_FREQ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        if conn:
            conn.close()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ö–õ–ò–ï–ù–¢–û–í ==========

@dp.message()
async def forward_client_message(message: types.Message):
    conn = None
    try:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—ã
        if message.chat.type != 'private' or message.text.startswith('/'):
            return
            
        user_id = message.from_user.id
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM clients WHERE user_id = %s', (user_id,))
        is_client = cursor.fetchone() is not None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç (–Ω–µ –∞–¥–º–∏–Ω) - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        if is_client and not is_admin(user_id):
            user_info = (
                f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n"
                f"üë§ –ò–º—è: {message.from_user.full_name}\n"
                f"üìå Username: @{message.from_user.username}\n"
                f"üÜî ID: {user_id}\n\n"
                f"üì© –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{message.text}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º (–±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
            await notify_admins(user_info)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await message.answer(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. "
                "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        if conn:
            conn.close()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–í–ï–¢–û–í –ê–î–ú–ò–ù–û–í ==========

@dp.message(lambda m: is_admin(m.from_user.id))
async def handle_admin_reply(message: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞" in message.reply_to_message.text:
        try:
            # –ü–∞—Ä—Å–∏–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            lines = message.reply_to_message.text.split('\n')
            client_id = None
            for line in lines:
                if "üÜî ID:" in line:
                    client_id = int(line.split(':')[1].strip())
                    break
            
            if client_id:
                await bot.send_message(
                    client_id,
                    f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
                )
                await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É")
    else:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
        current_state = await state.get_state()
        if current_state != AdminStates.ADMIN_CHATTING:
            await message.answer(
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É:\n"
                "1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞\n"
                "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –∏ –≤—ã–±–µ—Ä–∏—Ç–µ 'üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º'\n"
                "3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç"
            )

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========

@dp.message(lambda m: m.text == "üìä –û—Ç—á—ë—Ç –ø–æ –±–∞–∑–µ" and is_admin(m.from_user.id))
async def database_report(message: types.Message):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM clients')
        total_clients = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM admins')
        total_admins = cursor.fetchone()[0]
        
        cursor.execute('SELECT MIN(timestamp), MAX(timestamp) FROM clients')
        first_date, last_date = cursor.fetchone()
        
        cursor.execute('''
        SELECT 
            COUNT(*) as total,
            gender,
            age_group,
            visit_freq
        FROM clients
        GROUP BY gender, age_group, visit_freq
        ''')
        
        stats = cursor.fetchall()
        
        report = (
            "üìä –û—Ç—á—ë—Ç –ø–æ –±–∞–∑–µ:\n"
            f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
            f"üë®‚Äçüíª –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {total_admins}\n"
            f"üìÖ –ü–µ—Ä–≤–∞—è –∞–Ω–∫–µ—Ç–∞: {first_date}\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–Ω–∫–µ—Ç–∞: {last_date}\n\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:\n"
        )
        
        for row in stats:
            report += f"‚Ä¢ {row[1]}, {row[2]}, –ø–æ—Å–µ—â–∞–µ—Ç {row[3]}: {row[0]} —á–µ–ª.\n"
        
        await message.answer(report)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {str(e)}")
    finally:
        if conn:
            conn.close()

@dp.message(lambda m: m.text == "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤" and is_admin(m.from_user.id))
async def list_admins(message: types.Message):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
        SELECT a.user_id, a.username, u.username as added_by_username, a.added_at
        FROM admins a
        LEFT JOIN admins u ON a.added_by = u.user_id
        ORDER BY a.added_at DESC
        ''')
        admins = cursor.fetchall()
        
        if not admins:
            await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤")
            return
        
        response = "üë®‚Äçüíª –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
        for admin in admins:
            response += (
                f"üÜî ID: {admin[0]}\n"
                f"üë§ @{admin[1]}\n"
                f"‚ûï –î–æ–±–∞–≤–∏–ª: @{admin[2]}\n"
                f"üìÖ –î–∞—Ç–∞: {admin[3]}\n\n"
            )
        
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {str(e)}")
    finally:
        if conn:
            conn.close()

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞" and is_admin(m.from_user.id))
async def add_admin_start(message: types.Message, state: FSMContext):
    try:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º:",
            reply_markup=CANCEL_KEYBOARD
        )
        await state.set_state(AdminStates.ADD_ADMIN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(AdminStates.ADD_ADMIN)
async def add_admin_finish(message: types.Message, state: FSMContext):
    conn = None
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ADMIN_KEYBOARD)
            await state.clear()
            return
        
        try:
            new_admin_id = int(message.text)
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–µ
        try:
            new_admin = await bot.get_chat(new_admin_id)
            new_admin_username = new_admin.username if new_admin.username else "–±–µ–∑ username"
            new_admin_fullname = new_admin.full_name if new_admin.full_name else "–±–µ–∑ –∏–º–µ–Ω–∏"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –∞–¥–º–∏–Ω–µ: {e}")
            new_admin_username = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            new_admin_fullname = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT 1 FROM admins WHERE user_id = %s', (new_admin_id,))
        if cursor.fetchone():
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º", reply_markup=ADMIN_KEYBOARD)
            await state.clear()
            return
        
        cursor.execute('''
        INSERT INTO admins (user_id, username, added_by)
        VALUES (%s, %s, %s)
        ''', (
            new_admin_id,
            new_admin_username,
            message.from_user.id
        ))
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É
        try:
            await bot.send_message(
                new_admin_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ '–î—ã–º'.\n\n"
                "üìå –í–∞—à–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
                "- –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (/admin)\n"
                "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∫–µ—Ç\n"
                "- –û–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
                "- –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "üìå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
                "- –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                "- –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∞–¥–º–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n"
                "üìå –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:\n"
                "- –í–µ–∂–ª–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
                "- –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç\n"
                "- –ü–æ–º–æ—â—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º\n\n"
                "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @sarkis_20032"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        admin_message = (
            "üë®‚Äçüíª –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n"
            f"üÜî ID: {new_admin_id}\n"
            f"üë§ –ò–º—è: {new_admin_fullname}\n"
            f"üìõ @{new_admin_username}\n"
            f"‚ûï –î–æ–±–∞–≤–∏–ª: @{message.from_user.username} (ID: {message.from_user.id})\n\n"
            f"‚ÑπÔ∏è –ù–æ–≤—ã–π –∞–¥–º–∏–Ω –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        )
        await notify_admins(admin_message)
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin_username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω\n"
            "–ï–º—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏",
            reply_markup=ADMIN_KEYBOARD
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        if conn:
            conn.close()
        await state.clear()

@dp.message(lambda m: m.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤" and is_admin(m.from_user.id))
async def clear_admins_start(message: types.Message):
    try:
        if not is_super_admin(message.from_user.id):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
            
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_admins")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_clear_admins")]
        ])
        
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∞–¥–º–∏–Ω–æ–≤?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –∞–¥–º–∏–Ω—ã (–∫—Ä–æ–º–µ –≤–∞—Å) –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n"
            "–í—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(lambda c: c.data == "confirm_clear_admins" and is_admin(c.from_user.id))
async def confirm_clear_admins(callback: types.CallbackQuery):
    if not is_super_admin(callback.from_user.id):
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
        
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        cursor.execute('DELETE FROM admins WHERE user_id != %s', (callback.from_user.id,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        cursor.execute('INSERT INTO admins (user_id, username, added_by) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                      (callback.from_user.id, callback.from_user.username, callback.from_user.id))
        
        conn.commit()
        
        await callback.message.edit_text(
            "‚úÖ –ë–∞–∑–∞ –∞–¥–º–∏–Ω–æ–≤ –æ—á–∏—â–µ–Ω–∞. –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –∞–¥–º–∏–Ω–æ–≤",
            reply_markup=None
        )
    finally:
        if conn:
            conn.close()
        await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_clear_admins")
async def cancel_clear_admins(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
    finally:
        await callback.answer()

@dp.message(lambda m: m.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É" and is_admin(m.from_user.id))
async def clear_database_start(message: types.Message):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_clear")]
        ])
        
        await message.answer(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∫–ª–∏–µ–Ω—Ç–æ–≤?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(lambda c: c.data == "confirm_clear")
async def confirm_clear_db(callback: types.CallbackQuery):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM clients')
        conn.commit()
        
        await callback.message.edit_text(
            "‚úÖ –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã: {e}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã",
            reply_markup=None
        )
    finally:
        if conn:
            conn.close()
        await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_clear")
async def cancel_clear_db(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—á–∏—Å—Ç–∫–∏: {e}")
    finally:
        await callback.answer()

@dp.message(lambda m: m.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" and is_admin(m.from_user.id))
async def start_broadcast(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º:",
        reply_markup=CANCEL_KEYBOARD
    )
    await state.set_state(AdminStates.SEND_BROADCAST)

@dp.message(AdminStates.SEND_BROADCAST)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=ADMIN_KEYBOARD)
        await state.clear()
        return
    
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM clients WHERE is_admin = FALSE')
        clients = cursor.fetchall()
        
        total = len(clients)
        success = 0
        failed = 0
        
        await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        
        for client in clients:
            try:
                await bot.send_message(
                    client[0],
                    f"üì¢ –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ '–î—ã–º':\n\n{message.text}"
                )
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client[0]}: {e}")
                failed += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
        
        report = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total}"
        )
        
        await message.answer(report, reply_markup=ADMIN_KEYBOARD)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        await notify_admins(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
            f"{message.text}\n\n"
            f"{report}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ", reply_markup=ADMIN_KEYBOARD)
    finally:
        if conn:
            conn.close()
        await state.clear()

@dp.message(lambda m: m.text == "üí¨ –ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º" and is_admin(m.from_user.id))
async def chat_with_client_start(message: types.Message, state: FSMContext):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, full_name FROM clients WHERE is_admin = FALSE ORDER BY timestamp DESC LIMIT 50')
        clients = cursor.fetchall()
        
        if not clients:
            await message.answer("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞")
            return
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{full_name} (ID: {client_id})",
                callback_data=f"admin_chat_{client_id}"
            )] for client_id, full_name in clients
        ])
        
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_chat_select")]
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —á–∞—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(AdminStates.CHAT_WITH_CLIENT)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        if conn:
            conn.close()

@dp.callback_query(lambda c: c.data.startswith('admin_chat_'))
async def start_client_chat(callback: types.CallbackQuery, state: FSMContext):
    try:
        client_id = int(callback.data.split('_')[2])
        await state.update_data(client_id=client_id)
        
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")]], resize_keyboard=True)
        
        await callback.message.answer(
            f"üí¨ –í—ã –Ω–∞—á–∞–ª–∏ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º ID: {client_id}\n"
            "–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=keyboard
        )
        await state.set_state(AdminStates.ADMIN_CHATTING)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_chat_select")
async def cancel_chat_select(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "‚ùå –í—ã–±–æ—Ä —á–∞—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω",
            reply_markup=None
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞: {e}")
    finally:
        await callback.answer()

@dp.message(AdminStates.ADMIN_CHATTING)
async def forward_to_client(message: types.Message, state: FSMContext):
    try:
        if message.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":
            await message.answer("–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω", reply_markup=ADMIN_KEYBOARD)
            await state.clear()
            return
        
        data = await state.get_data()
        client_id = data['client_id']
        
        try:
            await bot.send_message(
                client_id,
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
            )
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(lambda m: m.text == "üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç" and is_admin(m.from_user.id))
async def detailed_clients_report(message: types.Message):
    conn = None
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT user_id, username, full_name, timestamp, appreciate, dislike, 
               improve, gender, age_group, visit_freq
        FROM clients
        WHERE is_admin = FALSE
        ORDER BY timestamp DESC
        LIMIT 50
        ''')
        
        clients = cursor.fetchall()
        
        if not clients:
            await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_parts = ["üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)\n"]
        for client in clients:
            client_info = [
                f"üë§ {client[2]} (@{client[1]})",
                f"üÜî ID: {client[0]}",
                f"üìÖ –î–∞—Ç–∞: {client[3]}",
                f"üßë‚Äçü§ù‚Äçüßë –ü–æ–ª: {client[7]}",
                f"üìä –í–æ–∑—Ä–∞—Å—Ç: {client[8]}",
                f"üõí –ü–æ—Å–µ—â–µ–Ω–∏—è: {client[9]}",
                f"üëç –ù—Ä–∞–≤–∏—Ç—Å—è: {client[4]}",
                f"üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è: {client[5]}",
                f"üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {client[6]}",
                "="*40
            ]
            report_parts.extend(client_info)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        current_message = ""
        for part in report_parts:
            if len(current_message) + len(part) > 4000:
                await message.answer(current_message)
                current_message = part + "\n"
            else:
                current_message += part + "\n"
        
        if current_message:
            await message.answer(current_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    finally:
        if conn:
            conn.close()

@dp.message(lambda m: m.text == "üîô –ù–∞–∑–∞–¥" and is_admin(m.from_user.id))
async def back_to_admin_menu(message: types.Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:", reply_markup=ADMIN_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")

# ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==========

@dp.message(Command('debug'))
async def debug_info(message: types.Message):
    conn = None
    try:
        user_id = message.from_user.id
        is_adm = is_admin(user_id)
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM admins WHERE user_id = %s', (user_id,))
        admin_data = cursor.fetchone()
        
        cursor.execute('SELECT * FROM clients WHERE user_id = %s', (user_id,))
        client_data = cursor.fetchone()
        
        response = (
            f"üîß Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"üÜî –í–∞—à ID: {user_id}\n"
            f"üë®‚Äçüíª –í—ã –∞–¥–º–∏–Ω: {'‚úÖ –î–∞' if is_adm else '‚ùå –ù–µ—Ç'}\n"
            f"üëë –í—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω: {'‚úÖ –î–∞' if is_super_admin(user_id) else '‚ùå –ù–µ—Ç'}\n"
            f"üìä –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–¥–º–∏–Ω–æ–≤: {admin_data}\n"
            f"üìù –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {client_data}\n\n"
            f"‚ÑπÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin"
        )
        
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ debug: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    finally:
        if conn:
            conn.close()

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        if not await check_db_connection():
            logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
